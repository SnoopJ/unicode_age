import unicode_age

import pytest


def test_version():
    assert unicode_age.version(ord("\N{SNAKE}")) == (6, 0)


def test_version_endofspan():
    # Regression test: at one point, the ends of version spans given in DerivedAge.txt weren't being handled correctly
    assert unicode_age.version(0x0903) == (1, 1)


def test_gh1_singleton_end_of_span():
    # check that we get the right answer for "singleton" codepoints that fall at
    # the end of an unrelated span (i.e. U+32FF)
    for codept, truever in [
        (0x0012ef, (4, 1)),
        (0x001cfa, (12, 0)),
        (0x009fcc, (6, 1)),
        (0x002bff, (12, 0)),
        (0x0005a2, (4, 1)),
        (0x01f93f, (12, 0)),
        (0x002e4f, (12, 0)),
        (0x00202f, (3, 0)),
        (0x0008d3, (11, 0)),
        (0x0013f5, (8, 0)),
        (0x01f6f9, (11, 0)),
        (0x01f94c, (10, 0)),
        (0x0009fb, (5, 2)),
        (0x000400, (3, 0)),
        (0x0023ff, (10, 0)),
        (0x001b4c, (14, 0)),
        (0x01f146, (5, 2)),
        (0x01f336, (7, 0)),
        (0x002c2f, (14, 0)),
        (0x000450, (3, 0)),
        (0x000220, (3, 2)),
        (0x001207, (4, 1)),
        (0x00274c, (6, 0)),
        (0x01f5a4, (9, 0)),
        (0x01f179, (5, 2)),
        (0x0008b5, (14, 0)),
        (0x00fdfc, (3, 2)),
        (0x000c80, (9, 0)),
        (0x01f600, (6, 1)),
        (0x000d3a, (6, 0)),
        (0x0019da, (5, 2)),
        (0x0110c2, (14, 0)),
        (0x00237b, (3, 0)),
        (0x00058f, (6, 1)),
        (0x00a4b4, (3, 2)),
        (0x0032ff, (12, 1)),
        (0x01f1ad, (13, 0)),
        (0x000d3d, (5, 1)),
        (0x01f6d5, (12, 0)),
        (0x000bb6, (4, 1)),
        (0x001247, (4, 1)),
        (0x001028, (5, 1)),
        (0x00a69e, (8, 0)),
        (0x0018aa, (5, 1)),
        (0x003250, (4, 0)),
        (0x000e89, (12, 0)),
        (0x002700, (7, 0)),
        (0x0023e8, (5, 2)),
        (0x0012af, (4, 1)),
        (0x000b44, (5, 1)),
        (0x01f9cb, (13, 0)),
        (0x01f7d9, (15, 0)),
        (0x00a82c, (13, 0)),
        (0x01f37d, (7, 0)),
        (0x0026b2, (5, 0)),
        (0x00fbc2, (14, 0)),
        (0x01f200, (5, 2)),
        (0x00214f, (5, 1)),
        (0x0006bf, (3, 0)),
        (0x000ece, (15, 0)),
        (0x0005c4, (2, 0)),
        (0x01f9c0, (8, 0)),
        (0x0020f0, (5, 1)),
        (0x0003da, (1, 1)),
        (0x01f15f, (5, 2)),
        (0x001e9b, (2, 0)),
        (0x0027bf, (6, 0)),
        (0x00a8c5, (9, 0)),
        (0x0026e2, (6, 0)),
        (0x01f62c, (6, 1)),
        (0x01f4ff, (8, 0)),
        (0x01f0bf, (7, 0)),
        (0x0012cf, (4, 1)),
        (0x0009ce, (4, 1)),
        (0x01f4f8, (7, 0)),
        (0x0116b8, (12, 0)),
        (0x00045d, (3, 0)),
        (0x01f57a, (9, 0)),
        (0x01e94b, (12, 0)),
        (0x01f13d, (5, 2)),
        (0x0004cf, (5, 0)),
        (0x000362, (3, 0)),
        (0x0017dd, (4, 0)),
        (0x00034f, (3, 2)),
        (0x000d4e, (6, 0)),
        (0x002183, (3, 0)),
        (0x00fe73, (3, 2)),
        (0x00094e, (5, 2)),
        (0x0008a0, (6, 1)),
        (0x002300, (1, 1)),
        (0x000af0, (6, 1)),
        (0x000c04, (11, 0)),
        (0x000c34, (7, 0)),
        (0x01f61f, (6, 1)),
        (0x00269d, (5, 1)),
        (0x01fae8, (15, 0)),
        (0x000d57, (1, 1)),
        (0x010a48, (11, 0)),
        (0x01f142, (5, 2)),
        (0x000588, (11, 0)),
        (0x00214c, (4, 1)),
        (0x00061b, (1, 1)),
        (0x000d5f, (8, 0)),
        (0x000980, (7, 0)),
        (0x0020b9, (6, 0)),
        (0x00097d, (4, 1)),
        (0x0005ba, (5, 0)),
        (0x0111cd, (7, 0)),
        (0x00102b, (5, 1)),
        (0x002618, (4, 1)),
        (0x0009fe, (11, 0)),
        (0x000560, (11, 0)),
        (0x0006dd, (1, 1)),
        (0x01f6d0, (8, 0)),
        (0x0003cf, (5, 1)),
        (0x000c5a, (8, 0)),
        (0x00a4c1, (3, 2)),
        (0x00a78f, (8, 0)),
        (0x000fb8, (3, 0)),
        (0x002c5f, (14, 0)),
        (0x01f930, (9, 0)),
        (0x0027cb, (6, 1)),
        (0x001022, (5, 1)),
        (0x00a7ae, (9, 0)),
        (0x001cf7, (10, 0)),
        (0x01f91f, (10, 0)),
        (0x01145a, (13, 0)),
        (0x0027b0, (6, 0)),
        (0x01031f, (7, 0)),
        (0x01f12f, (11, 0)),
        (0x000f6a, (3, 0)),
        (0x000a75, (5, 1)),
        (0x00065f, (6, 0)),
        (0x001347, (4, 1)),
        (0x000d29, (6, 0)),
        (0x01f3c5, (7, 0)),
        (0x00a7aa, (6, 1)),
        (0x011147, (13, 0)),
        (0x0033ff, (4, 0)),
        (0x000604, (6, 1)),
        (0x0008e2, (9, 0)),
        (0x0111da, (7, 0)),
        (0x00327e, (4, 1)),
        (0x0020eb, (4, 1)),
        (0x0020be, (8, 0)),
        (0x00131f, (4, 1)),
        (0x01f90c, (13, 0)),
        (0x0024ff, (4, 0)),
        (0x002bc9, (12, 0)),
        (0x00213b, (4, 0)),
        (0x000d44, (5, 1)),
        (0x000eba, (12, 0)),
        (0x000978, (7, 0)),
        (0x002064, (5, 1)),
        (0x01171a, (11, 0)),
        (0x01d4c1, (4, 0)),
        (0x00180e, (3, 0)),
        (0x00170d, (14, 0)),
        (0x012399, (8, 0)),
        (0x00037e, (1, 1)),
        (0x01f157, (5, 2)),
        (0x001287, (4, 1)),
        (0x0030ff, (3, 2)),
        (0x000eac, (12, 0)),
        (0x012474, (7, 0)),
        (0x00a7f7, (7, 0)),
        (0x01f190, (5, 2)),
        (0x000904, (4, 0)),
        (0x002705, (6, 0)),
        (0x01f979, (14, 0)),
        (0x01f16c, (12, 0)),
        (0x002bd2, (10, 0)),
        (0x0008ff, (7, 0)),
        (0x00205f, (3, 2)),
        (0x002047, (3, 2)),
        (0x011a9d, (11, 0)),
        (0x001715, (14, 0)),
        (0x0026ce, (6, 0)),
        (0x000cf3, (15, 0)),
        (0x000ea0, (12, 0)),
        (0x01f17f, (5, 2)),
        (0x000955, (5, 2)),
        (0x0007b1, (3, 2)),
        (0x002189, (5, 2)),
        (0x000a8c, (4, 0)),
        (0x00312d, (5, 1)),
        (0x01f43f, (7, 0)),
        (0x00130f, (4, 1)),
        (0x0006cf, (3, 0)),
        (0x0006ff, (4, 0)),
        (0x01019c, (13, 0)),
        (0x000d04, (13, 0)),
        (0x01f611, (6, 1)),
        (0x0110bd, (5, 2)),
        (0x0003d7, (3, 0)),
        (0x0003f6, (3, 2)),
        (0x0002df, (3, 0)),
        (0x016fe4, (13, 0)),
        (0x00060b, (4, 1)),
        (0x01342f, (15, 0)),
        (0x0010fb, (1, 1)),
        (0x002c70, (5, 2)),
        (0x01fa74, (13, 0)),
        (0x00303e, (3, 0)),
        (0x002070, (1, 1)),
        (0x002057, (3, 2)),
        (0x000b71, (4, 0)),
        (0x002756, (1, 1)),
        (0x000487, (5, 1)),
        (0x01123e, (9, 0)),
        (0x00a4c5, (3, 2)),
        (0x002e31, (5, 2)),
        (0x01f634, (6, 1)),
        (0x002728, (6, 0)),
        (0x000e98, (12, 0)),
        (0x00040d, (3, 0)),
        (0x00a7fa, (6, 0)),
        (0x00fffc, (2, 1)),
        (0x001878, (11, 0)),
        (0x0020ab, (2, 0)),
        (0x0000ad, (1, 1)),
        (0x001dfa, (14, 0)),
        (0x000c84, (11, 0)),
        (0x01f971, (12, 0)),
        (0x000f96, (3, 0)),
        (0x01f23b, (9, 0)),
        (0x02b739, (15, 0)),
        (0x01f615, (6, 1)),
    ]:
        ver = unicode_age.version(codept)
        assert ver == truever, f"Version mismatch for 0x{codept:06x}"


def test_version_badtype():
    with pytest.raises(TypeError):
        unicode_age.version("\N{SNAKE}")
